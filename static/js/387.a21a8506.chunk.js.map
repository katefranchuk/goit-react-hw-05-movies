{"version":3,"file":"static/js/387.a21a8506.chunk.js","mappings":"wQAEaA,E,QAAcC,GAAAA,GAAH,kFAGf,qBAAGC,MAAkBC,QAAQ,EAA7B,I,mBCoCT,EAnCgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAZAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,8GAEIC,EAAAA,EAAAA,IAAeJ,GAFnB,OAETK,EAFS,OAGfN,EAAWM,GAHI,gDAKfC,QAAQC,IAAI,KAAMC,SALH,yDAAH,qDAQhBL,GACD,GAAE,CAACH,KAGF,gCACsB,IAAnBF,EAAQW,SACP,cAAGC,MAAO,CAAEC,UAAW,UAAvB,mCAEF,SAAClB,EAAD,UACGK,EAAQc,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,WAAxB,OACX,2BACE,uBAAIF,KACJ,uBAAIC,KACJ,2BAAOE,EAAAA,EAAAA,GAAwBD,OAHxBH,EADE,QAUpB,C,qOCpCKK,EAAW,gCACXC,EAAU,mCAGHC,EAAgB,mCAAG,sGAGpBC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,uCAAoDC,IAHhC,uBAEpBG,EAFoB,EAE5BjB,KAAQiB,QAFoB,kBAIvBA,GAJuB,2CAAH,qDAOhBC,EAAgB,mCAAG,WAAOC,GAAP,8FAAcC,EAAd,+BAAqB,EAArB,SACPJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC+BK,EAD/B,iBAC6CC,IAFtC,uBACtBpB,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,sDAOhBqB,EAAc,mCAAG,WAAM1B,GAAN,yFACLqB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAlB,EADA,oBACmBmB,IAFd,uBACpBd,EADoB,EACpBA,KADoB,kBAIrBA,GAJqB,2CAAH,sDAOdD,EAAc,mCAAG,WAAMJ,GAAN,yFAGlBqB,EAAAA,EAAAA,IAAA,UACLH,EADK,kBACalB,EADb,4BACwCmB,IAJtB,uBAElBG,EAFkB,EAE1BjB,KAAQiB,QAFkB,kBAMrBA,GANqB,2CAAH,sDASdK,EAAW,mCAAG,WAAM3B,GAAN,yFACFqB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAlB,EADA,4BAC2BmB,IAFzB,uBACjBd,EADiB,EACjBA,KADiB,kBAIlBA,EAAKuB,MAJa,2CAAH,sDAOXC,EAAgB,SAAAC,GAAG,OAAKA,EAvCrB,mCAuCwCA,EAAMC,CAA9B,C,4FC1CnBC,EAAoB,SAAAC,GAC/B,OAAOC,EAAAA,EAAAA,GAAOC,KAAKC,MAAMH,GAAO,OAEjC,EAEYhB,EAA0B,SAAAgB,GACrC,OAAOC,EAAAA,EAAAA,GAAOC,KAAKC,MAAMH,GAAO,sBACjC,C","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/api.js","services/dataFormator.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.spacing(5)};\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getFilmReviews } from 'services/api';\nimport { ReviewsList } from './Reviews.styled';\nimport { formatReviewCreatedDate } from 'services/dataFormator';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getReviews = async () => {\n      try {\n        const data = await getFilmReviews(movieId);\n        setReviews(data);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length === 0 && (\n        <p style={{ textAlign: 'center' }}>Reviews aren't found</p>\n      )}\n      <ReviewsList>\n        {reviews.map(({ id, author, content, created_at }) => (\n          <li key={id}>\n            <p>{author}</p>\n            <p>{content}</p>\n            <span>{formatReviewCreatedDate(created_at)}</span>\n          </li>\n        ))}\n      </ReviewsList>\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nimport defaultImg from '../images/no-poster.png';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '6987abdd73bbf0837922d5a4f94ce9fa';\nconst IMAGE_PATH = `https://image.tmdb.org/t/p/w500/`;\n\nexport const getTrendingFilms = async () => {\n  const {\n    data: { results },\n  } = await axios.get(`${BASE_URL}trending/movie/week?api_key=${API_KEY}`);\n  return results;\n};\n\nexport const getFilmsBySearch = async (query, page = 1) => {\n  const { data } = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`\n  );\n  return data;\n};\n\nexport const getFilmDetails = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const getFilmReviews = async movieId => {\n  const {\n    data: { results },\n  } = await axios.get(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return results;\n};\n\nexport const getFilmCast = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return data.cast;\n};\n\nexport const getFilmPoster = url => (url ? IMAGE_PATH + url : defaultImg);\n","import { format } from 'date-fns';\n\nexport const formatReleaseDate = date => {\n  return format(Date.parse(date), 'yyyy');\n  // (new Date(), 'yyyy')\n};\n\nexport const formatReviewCreatedDate = date => {\n  return format(Date.parse(date), 'dd MMMM yyyy, HH:mm');\n};\n"],"names":["ReviewsList","styled","theme","spacing","useState","reviews","setReviews","movieId","useParams","useEffect","getReviews","getFilmReviews","data","console","log","message","length","style","textAlign","map","id","author","content","created_at","formatReviewCreatedDate","BASE_URL","API_KEY","getTrendingFilms","axios","results","getFilmsBySearch","query","page","getFilmDetails","getFilmCast","cast","getFilmPoster","url","defaultImg","formatReleaseDate","date","format","Date","parse"],"sourceRoot":""}